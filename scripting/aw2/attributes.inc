#if defined __aw2_0_included
 #endinput
#endif
#define __aw2_0_included

#define TAKEDAMAGE_DAMAGE       0    
#define TAKEDAMAGE_DAMAGETYPE   1

//Global Sounds
#define SOUND_SHIELD_BREAK                  "player/spy_shield_break.wav"
#define SOUND_SAPPER_BREAK                  "weapons/sapper_removed.wav"
#define SOUND_EXPLOSION_BIG                 "ambient/explosions/explode_8.wav"
#define SOUND_CHARGE_STICKYBOMB             "weapons/stickybomblauncher_charge_up.wav"
#define SOUND_BONEBREAK                     "player/pl_fleshbreak.wav"
#define SOUND_WEAPON_SHOTGUN                "weapons/shotgun_shoot.wav"
#define SOUND_VO_HEAVY_I_LIVE               "vo/heavy_battlecry06.wav"
#define SOUND_UBERCHARGE                    "player/invulnerable_on.wav"
#define SOUND_HL1_BELL                      "HL1/fvox/bell.wav"
#define SOUND_TRAIN_BELL_LOOP               "ambient/alarms/train_crossing_bell_loop1.wav"
#define SOUND_HORROR_BELL                   "ambient/alarms/warningbell1.wav"
#define SOUND_STABBY                        "items/halloween/stabby.wav"
#define SOUND_1122_NOKILL		    "physics/surfaces/underwater_impact_bullet1.wav"
#define SOUND_ALT_FIRE_PROJ                 "items/pumpkin_explode1.wav"
#define SOUND_BLOCK_CROUCH                  "physics/body/body_medium_impact_soft1.wav"
#define SOUND_MARKED                        "ui/scored.wav"
#define SOUND_COMBO_HEAVY                   "ui/player/taunt_bell.wav"
#define SOUND_SUPRISE_SPY                   "ui/duel_event.wav"
#define SOUND_MARKED_REV                    "replay/downloadcomplete.wav"
#define SOUND_HEALAOE                       "vo/medic_specialcompleted03.wav"
#define SOUND_HEALAOE2                      "player/quickfix_invulnerable_on.wav"
#define SOUND_1174_CHARGEPOOF               "player/pl_impact_airblast1.wav"
#define SOUND_MEGABUSTER_SHOOT              "AdvancedWeaponiser/megabuster_shoot.wav"
#define SOUND_FLAME_ENGULF                   "misc/flame_engulf.wav"

//Global Models
#define MODEL_DEFAULTPHYSICS                "models/props_2fort/coffeepot.mdl"
#define MODEL_BOOMERANG                     "models/props_halloween/ghost.mdl"
#define PROJECTILE_MODEL_21                 "models/weapons/w_models/w_grenade_heal.mdl"
#define PROJECTILE_MODEL_22                 "models/weapons/w_models/w_grenade_mirv.mdl"
#define PROJECTILE_MODEL_23                 "models/weapons/w_models/w_grenade_nail.mdl"
#define PROJECTILE_MODEL_24                 "models/weapons/w_models/w_grenade_emp.mdl"

//Global Sprites & Particles
#define PARTICLE_FIRE                       "buildingdamage_dispenser_fire1"
#define PARTICLE_AREA_FIRE_BLUE             "player_glowblue"
#define PARTICLE_EXPLOSION                  "ExplosionCore_MidAir"

#define PARTICLE_EXPLOSION_SMOKE            "bombinomicon_burning_piece_halloween"
#define PARTICLE_EXPLOSION_FLASH            "Explosion_Flash_1"
#define PARTICLE_EXPLOSION_BUBBLES          "Explosion_bubbles"
#define PARTICLE_QUICKDRAW_RED              "duel_red"
#define PARTICLE_QUICKDRAW_BLUE             "duel_blue"
#define PARTICLE_POISON_GAS                 "eb_death_gas"
#define PARTICLE_POISON_GOOP                "eb_death_goop"
#define PARTICLE_PURPLE_FLAME_SMOG          "bombinomicon_burningsmoke"
#define PARTICLE_BUBBLESTREAM               "flamethrower_underwater"
#define PARTICLE_TOXIC_DEBUFF_BLUE          "health_lost_blue"
#define PARTICLE_TOXIC_DEBUFF_RED           "health_lost_red"
#define PARTICLE_STEAM_ZSTREAM              "steam_plume"
#define PARTICLE_ALT_FIRESTREAM             "cauldron_flamethrower"
#define PARTICLE_SNOWIMPACT                 "snow_steppuff01"
#define PARTICLE_ORBITING_SKULL             "diamondback_enemytag_skull_helper"
#define PARTICLE_ZEUS                       "wrenchmotron_teleport_beam"
#define PARTICLE_ZEUS_CRACKLE               "wrenchmotron_idle_electro"
#define PARTICLE_GLOWINGBURST               "default"
#define PARTICLE_BLOODMIST                  "blood_impact_red_01_goop"
#define PARTICLE_BLOODIMPACT                "blood_impact_red_01"
#define PARTICLE_WUBWUB_BEAM                "bison_muzzle_flash_child_beam06"
#define PARTICLE_BISONSHOCK                 "bison_impact_child_electro"
#define PARTICLE_BISONIMPACT                "drg_bison_impact"
#define PARTICLE_ELECTRICITY                "electrocuted_blue"
#define PARTICLE_ELECTROCUTED               "electrocuted_gibbed_blue_flash"
#define PARTICLE_MUSKET_FLASH               "muzzle_bignasty"
#define PARTICLE_DRAW_LASER_SIGHT           "drg_wrenchmotron_teleport"
#define PARTICLE_FLASH                      "wrenchmotron_teleport_flash"
#define PARTICLE_SPIRITBALL                 "drg_cowmangler_idle"
#define PARTICLE_HADOKEN                    "drg_manmelter_projectile"
#define PARTICLE_HADOKEN_TRAIL              "drg_3rd_trail"
#define PARTICLE_SPECIALUBER                "pomson_muzzleflash_electro"

#define PARTICLE_DARK_FIRE                  "halloween_boss_foot_fire"
#define PARTICLE_SPY_DISGUISE_R             "spy_start_disguise_red"
#define PARTICLE_SPY_DISGUISE_B             "spy_start_disguise_blue"
#define PARTICLE_WHITE_PARTICLE             "arm_muzzleflash_flare"
#define PARTICLE_IMPACT_BLUE                "impact_generic_burst"
#define PARTICLE_HADOKEN_2                  "fireSmokeExplosion"
#define PARTICLE_HADOKEN_3                  "fireSmokeExplosion2"
#define PARTICLE_MEDIC_HEAL_AURA_R          "medic_healradius_red_buffed"
#define PARTICLE_MEDIC_HEAL_AURA_B          "medic_healradius_blue_buffed"
#define PARTICLE_RAGE_BUFF                  "superrare_plasma"
#define PARTICLE_BLUR                       "warp_version"
#define PARTICLE_BULLET_SURROUND            "unusual_orbit_shells"
#define PARTICLE_FIRETRAIL1                 "explosion_trailFire"
#define PARTICLE_SMOKETRAIL1                "explosion_trailSmoke"
#define PARTICLE_SPOOKYTRAIL1               "ghost_pumpkin"
#define PARTICLE_MUZZLE2                    "rocketbackblast"
#define PARTICLE_SPOOKYAURA                 "halloween_boss_eye_glow"
#define PARTICLE_STARRY_BURST               "xmas_snowburst_child03"
#define PARTICLE_SCARED                     "yikes_text"
#define PARTICLE_HEALED_B                   "medic_megaheal_blue_shower"
#define PARTICLE_HEALED_R                   "medic_megaheal_red_shower"
#define PARTICLE_METAL_SHIELD_SPARKS1       "buildingdamage_sparks4"
#define PARTICLE_METAL_SHIELD_SPARKS2       "impact_metal"

/*new g_iEntitySlot[MAX_EDICTS+1] = -1;
new g_iLastButtons[MAXPLAYERS+1] = 0;
new bool:g_bRocketJumping[MAXPLAYERS+1] = false;
new bool:g_bStickyJumping[MAXPLAYERS+1] = false;
new bool:g_bWasDisguised[MAXPLAYERS+1] = false;
new g_iBuffType[MAXPLAYERS+1] = 0;
new g_iBuffers[MAXPLAYERS+1] = 0;
new Handle:g_hAttributes[MAXPLAYERS+1] = INVALID_HANDLE;
new bool:g_bBuffDeployer[MAXPLAYERS+1] = false;*/

public const String:g_strSoundExplosionBox[][PLATFORM_MAX_PATH] = {
    "weapons/rocket_blackbox_explode1.wav",
    "weapons/rocket_blackbox_explode2.wav",
    "weapons/rocket_blackbox_explode3.wav"
};

public const String:g_strGenericHit[][PLATFORM_MAX_PATH] = {
    "weapons/cbar_hitbod1.wav",
    "weapons/cbar_hitbod2.wav",
    "weapons/cbar_hitbod3.wav"
};

// #include aw2/attributes/attack_while_cloaked.inc
// #include aw2/attributes/damage_is_healed.inc
// #include aw2/attributes/freely_deploy_ubercharge.inc
// #include aw2/attributes/climbs_on_hit.inc
// #include aw2/attributes/projectiles_bounce.inc
// #include aw2/attributes/disable_enemy_primary.inc
// #include aw2/attributes/disorientate_on_hit.inc
// #include aw2/attributes/drains_uber_on_hit.inc
// #include aw2/attributes/damage_increases_with_uber.inc
// #include aw2/attributes/earthquake_on_rocketland.inc
// #include aw2/attributes/push_down_player.inc
// #include aw2/attributes/reduced_fall_damage.inc
// #include aw2/attributes/new_slowed_movespeed.inc
// #include aw2/attributes/drains_ammo_while_slowed.inc
// #include aw2/attributes/charged_airblast.inc
// #include aw2/attributes/reflected_projectiles_become_crit.inc
#include aw2/attributes/meet_the_sniper_combo.inc
// #include aw2/attributes/controllable_projectiles.inc
// #include aw2/attributes/fire_retardant.inc
// #include aw2/attributes/cloak_is_hook.inc
// #include aw2/attributes/increased_pushscale.inc
// #include aw2/attributes/disable_weapon_silent.inc
// #include aw2/attributes/wall_smash_on_hit.inc
// #include aw2/attributes/cloak_regen_rate_custom.inc
// #include aw2/attributes/miss_cause_delay.inc
// #include aw2/attributes/uber_on_neardeath.inc
// #include aw2/attributes/injection_on_hit.inc
// #include aw2/attributes/crit_on_disguise_removal.inc
// #include aw2/attributes/alt_fire_is_oil.inc
// #include aw2/attributes/evasiveness_on_hit.inc
// #include aw2/attributes/fastcloak_on_backstab.inc
// #include aw2/attributes/cloak_is_escape.inc
// #include aw2/attributes/cloak_disabled_until_full.inc
// #include aw2/attributes/all_damage_done_is_selfhurt.inc
// #include aw2/attributes/damage_is_selfhurt.inc
// #include aw2/attributes/crit_on_medics_healing.inc
// #include aw2/attributes/give_metal_on_hit.inc
// #include aw2/attributes/metal_drains_global.inc
// #include aw2/attributes/no_headshot_fix.inc
// #include aw2/attributes/damage_is_explosive.inc
// #include aw2/attributes/projectile_model.inc
// #include aw2/attributes/sound_while_active.inc
// #include aw2/attributes/sound_on_kill.inc
// #include aw2/attributes/no_backstab.inc
// #include aw2/attributes/combo_claw.inc
// #include aw2/attributes/desperate_katana.inc
// #include aw2/attributes/death_is_brutal.inc
// //Start-of-new-attributes
// #include aw2/attributes/community_girl/1095_uber_on_kill_fixed.inc
// #include aw2/attributes/community_girl/1096_disable_some_alt_fires.inc
// #include aw2/attributes/community_girl/1097_metal_on_kill.inc
// #include aw2/attributes/community_girl/1098_parent_particles_test.inc
// #include aw2/attributes/community_girl/1099_democharge_on_hit.inc
// #include aw2/attributes/community_girl/1100_refresh_drink_on_kill
// #include aw2/attributes/community_girl/1101_meet_the_pyro_combo.inc
// #include aw2/attributes/community_girl/1102_sticky_targe.inc
// #include aw2/attributes/community_girl/1103_defense_on_major_hit.inc
// #include aw2/attributes/community_girl/1104_miss_piss_yourself.inc
// #include aw2/attributes/community_girl/1105_meet_the_soldier_combo.inc
// #include aw2/attributes/community_girl/1106_defense_on_kill.inc
// #include aw2/attributes/community_girl/1107_cola_on_kill.inc
// #include aw2/attributes/community_girl/1108_piss_on_hit.inc
// #include aw2/attributes/community_girl/1109_marked_on_hit.inc
// #include aw2/attributes/community_girl/1110_ubereffect_on_major_hit.inc
// #include aw2/attributes/community_girl/1111_ubereffect_on_kill.inc
// #include aw2/attributes/community_girl/1112_bleed_on_major_hit.inc
// #include aw2/attributes/community_girl/1113_speedup_on_major_hit.inc
// #include aw2/attributes/community_girl/1114_disarm_on_damaging_hit.inc
// #include aw2/attributes/community_girl/1115_uber_while_demo_charges.inc
// //#include aw2/attributes/community_girl/1116_meet_the_spy_removes_fluids.inc
// #include aw2/attributes/community_girl/1117_remove_disguise_on_major_hit.inc
// #include aw2/attributes/community_girl/1118_Projectile_speed.inc
// #include aw2/attributes/community_girl/1119_Arrow_Rain.inc
// #include aw2/attributes/community_girl/1120_charge_is_no_crit.inc
// #include aw2/attributes/community_girl/1121_delay_primary_attack.inc
// #include aw2/attributes/community_girl/1122_nonlethal.inc
// #include aw2/attributes/community_girl/1123_madmilk_on_hit.inc
// #include aw2/attributes/community_girl/1124_minicrits_after_taunt.inc
// #include aw2/attributes/community_girl/1125_speedbuff_whileburning.inc
// #include aw2/attributes/community_girl/1126_firerate_decreases.inc
// #include aw2/attributes/community_lilguy/1127_metal_shield.inc
// #include aw2/attributes/community_lilguy/1128_medigun_removes_debuffs.inc
// #include aw2/attributes/community_lilguy/1129_uber_is_jarate_bleed.inc
// #include aw2/attributes/community_girl/1130_reveal_on_combohit.inc
// #include aw2/attributes/community_girl/1131_Damage_debuff.inc
// #include aw2/attributes/community_lilguy/1132_combo_fists.inc
// #include aw2/attributes/community_girl/1133_attribute_emp.inc
// #include aw2/attributes/community_girl/1134_srifle_damage.inc
// #include aw2/attributes/community_girl/1135_taunt_changes_mode.inc
// #include aw2/attributes/community_girl/1136_backattack_effect.inc
// #include aw2/attributes/community_lilguy/1137_repair_on_kill.inc
// #include aw2/attributes/community_girl/1138_alt_fire_causes_attack.inc
// #include aw2/attributes/community_girl/1139_headshotgib_foxmcrits.inc
// #include aw2/attributes/community_lilguy/1140_uber_is_minicrit_def.inc
// #include aw2/attributes/community_lilguy/1141_uber_gain_on_assist.inc
// #include aw2/attributes/community_girl/1142_reverse_damage_falloff.inc
// #include aw2/attributes/community_girl/1143_bounce_damage.inc
// #include aw2/attributes/community_girl/1144_cannot_headshot_conditional.inc
// #include aw2/attributes/community_girl/1145_particle_impact_sfx.inc
// #include aw2/attributes/community_abe/1146_crit_damage_bonus.inc
// #include aw2/attributes/community_abe/1147_crit_damage_reduction.inc
// #include aw2/attributes/community_girl/1148_particle_onfire.inc
// //#include aw2/attributes/community_girl/1149_Proj_Alt_fire.inc
// #include aw2/attributes/community_lilguy/1150_faster_building_carry.inc
// #include aw2/attributes/community_lilguy/1151_arsewipe.inc
// #include aw2/attributes/community_lilguy/1152_damage_delayed_after_lunch.inc
// #include aw2/attributes/community_girl/1153_Proj_Alt_fire.inc
// #include aw2/attributes/community_girl/1154_buff_is_speed.inc
// #include aw2/attributes/community_girl/1155_boomerang.inc
// #include aw2/attributes/community_girl/1156_pipebomb_rain.inc
// #include aw2/attributes/community_girl/1157_attacks_crit_on_hit.inc
// #include aw2/attributes/community_girl/1158_alt_fire_is_slower.inc
// #include aw2/attributes/community_girl/1159_trinity_grenade.inc
#include aw2/attributes/community_lilguy/1160_rage_drain_when_inactive.inc
// #include aw2/attributes/community_girl/1161_glide_player.inc
// #include aw2/attributes/community_girl/1162_dove_rain_redone.inc
// #include aw2/attributes/community_abe/1163_hot_sauce.inc
// #include aw2/attributes/community_girl/1164_kiblast.inc
// #include aw2/attributes/community_duck/1165_mark4death.inc
// #include aw2/attributes/community_chawlz/1166_speedcloak.inc
// #include aw2/attributes/community_duck/1167_higher_jump.inc
// #include aw2/attributes/community_girl/1168_block.inc
// #include aw2/attributes/community_abe/1169_dmg_health.inc
// #include aw2/attributes/medieval_mode_enabled.inc
// #include aw2/attributes/community_duck/1171_forced_falloff.inc
// #include aw2/attributes/community_girl/1172_triplearrow.inc
// //#include aw2/attributes/community_duck/1173_forced_falloff_projectile.inc
// #include aw2/attributes/community_chawlz/1174_invis_on_charge.inc
// #include aw2/attributes/community_chawlz/1175_add_to_clips_on_hit.inc
// #include aw2/attributes/community_lilguy/1176_custom_uber_fix.inc
// #include aw2/attributes/community_duck/1177_minicritbuff_orig.inc
// #include aw2/attributes/community_lilguy/1178_sniper_charge_look.inc
// #include aw2/attributes/community_lilguy/1181_def_rage_bonus.inc
// #include aw2/attributes/community_lilguy/1182_all_rage_bonus.inc
// #include aw2/attributes/community_chawlz/1183_sniper_lose_charge_when_hit.inc
// #include aw2/attributes/community_chawlz/1184_sniper_hidden_while_powercharged.inc
// #include aw2/attributes/community_duck/1185_uber_is_speed.inc
// #include aw2/attributes/community_duck/1186_uber_regen.inc
// #include aw2/attributes/community_chawlz/1187_retain_charge_on_kill.inc
// #include aw2/attributes/community_chawlz/1188_slow_on_swing.inc
// #include aw2/attributes/community_duck/1189_multiscale.inc
// #include aw2/attributes/community_chawlz/1190_damage_boost_on_kill.inc
// #include aw2/attributes/community_duck/1191_assisted_dmg_charges_uber.inc
// #include aw2/attributes/community_duck/1192_assisted_dmg_bonus.inc
// #include aw2/attributes/community_chawlz/1193_reset_afterburn_on_hit.inc
// #include aw2/attributes/community_duck/1194_fire_rage.inc
// #include aw2/attributes/community_chawlz/1195_add_charge_on_direct_hit.inc
// #include aw2/attributes/community_duck/1196_longer_uber.inc
// #include aw2/attributes/community_chawlz/1197_megabuster_attribs.inc
// #include aw2/attributes/community_chawlz/1198_sound_on_fire.inc
// #include aw2/attributes/community_chawlz/1199_sniper_lose_charge_on_full.inc
// #include aw2/attributes/community_chawlz/1201_on_hit_gaben.inc
// #include aw2/attributes/community_chawlz/1202_must_empty_clip.inc
// #include aw2/attributes/community_gage/1203_deploy_crits_on_syringegun.inc
// #include aw2/attributes/community_chawlz/1204_melee_damage_bonus.inc
// #include aw2/attributes/community_chawlz/1205_charged_melee.inc

#endinput

public Action:Attributes_OnSoundPlayed(iClient, &numClients, String:sample[PLATFORM_MAX_PATH], &entity, &channel, &Float:volume, &level, &pitch, &flags)
{
    if (!IsValidClient(iClient)) return Plugin_Continue;
    
    if (StrContains(sample, "demoman_paincritical", false) == -1)     return Plugin_Continue;
    if (StrContains(sample, "demoman_", false) == -1)  return Plugin_Continue;
    if (TF2_GetPlayerClass(iClient) == TFClass_DemoMan) return Plugin_Continue;
    
    return Plugin_Stop;
}

public Action:Attributes_OnTakeDamage(iVictim, &iAttacker, &iInflicter, &Float:fDamage, &iDamagetype, &iWeapon, Float:fForce[3], Float:fForcePos[3])
{
    #if defined ENABLE_ATTRIBUTES
    if (iVictim <= 0) return Plugin_Continue;
    if (IsValidClient(iAttacker) && IsValidClient(iVictim) && iAttacker != iVictim && GetClientTeam(iAttacker) == GetClientTeam(iVictim)) return Plugin_Continue;
    
    new bool:bBuilding = IsEntityBuilding(iVictim);
    if (!bBuilding && !CanRecieveDamage(iVictim)) return Plugin_Continue;
 
    // Set up return
    new Action:aReturn = Plugin_Continue;
    
    // Get the slot
    new iSlot = GetClientSlot(iAttacker);
    decl String:strClassname[PLATFORM_MAX_PATH];
    if (iWeapon > 0 && IsValidEdict(iWeapon)) {
        GetEdictClassname(iWeapon, strClassname, sizeof(strClassname));
        iSlot = GetWeaponSlot(strClassname);
    } else {
        if (iInflicter > 0 && !IsValidClient(iInflicter) && IsValidEdict(iInflicter)) {
            GetEdictClassname(iInflicter, strClassname, sizeof(strClassname));
            iSlot = GetWeaponSlot(strClassname);
        }
    }
        
    //PrintToChatAll("Damage pre: %.1f", fDamage);
    
    //if (IsValidClient(iAttacker) && IsAdmin(iAttacker)) PrintToChat(iAttacker, "Damagetype PRE: %d", iDamagetype);
    
    new iOldType = iDamagetype;
    
    if (IsDamageTypeCrit(iOldType)) fDamage *= 2.0;

    // these modify damage
    ActionApply(aReturn, Attribute_1007_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1088_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1190_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    
    // these do all sorts of stuff
    ActionApply(aReturn, Attribute_42_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1035_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1004_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1064_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1066_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1016_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1000_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1068_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1069_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1012_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1059_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1003_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1046_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1048_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1062_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1072_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1073_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1075_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1076_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1079_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1085_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1090_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1099_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1101_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1103_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1104_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1105_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1108_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1109_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1110_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1112_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1113_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1114_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1117_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1120_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1121_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1122_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1123_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1127_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1129_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1130_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1132_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1133_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1134_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1135_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1136_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1138_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1139_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1142_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1143_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1144_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1145_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1146_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1147_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    //ActionApply(aReturn, Attribute_1149_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1151_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1152_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1159_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1160_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1164_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1165_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1168_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1169_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1171_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1179_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1175_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1183_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1184_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1188_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1189_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1191_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1192_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1193_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1194_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1195_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1201_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1204_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    ActionApply(aReturn, Attribute_1205_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
	
    // Post. These modify client variables
    ActionApply(aReturn, Attribute_1065_OnTakeDamage(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding));
    
    if (IsDamageTypeCrit(iOldType)) fDamage /= 2.0;

    //if (IsValidClient(iAttacker) && IsAdmin(iAttacker)) PrintToChat(iAttacker, "Damagetype POST: %d", iDamagetype);
    
    return aReturn; 
    #else
    return Plugin_Continue;
    #endif
}


//public Action:Attributes_OnTakeDamage_Projectile(iVictim, &iAttacker, &iInflicter, &Float:fDamage, &iDamagetype, &iWeapon, Float:fForce[3], Float:fForcePos[3])
//{
//   #if defined ENABLE_ATTRIBUTES
//    if (iVictim <= 0) return Plugin_Continue;
//    if (IsValidClient(iAttacker) && IsValidClient(iVictim) && iAttacker != iVictim && GetClientTeam(iAttacker) == GetClientTeam(iVictim)) return Plugin_Continue;
    
//    new bool:bBuilding = IsEntityBuilding(iVictim);
//    if (!bBuilding && !CanRecieveDamage(iVictim)) return Plugin_Continue;
 
    // Set up return
//    new Action:aReturn = Plugin_Continue;
    
    // Get the slot
//    new iSlot = GetClientSlot(iAttacker);
//    decl String:strClassname[PLATFORM_MAX_PATH];
//    if (iWeapon > 0 && IsValidEdict(iWeapon)) {
//        GetEdictClassname(iWeapon, strClassname, sizeof(strClassname));
//        iSlot = GetWeaponSlot(strClassname);
//    } else {
//        if (iInflicter > 0 && !IsValidClient(iInflicter) && IsValidEdict(iInflicter)) {
//            GetEdictClassname(iInflicter, strClassname, sizeof(strClassname));
//            iSlot = GetWeaponSlot(strClassname);
//        }
//    }    
//    new iOldType = iDamagetype;
    
//    if (IsDamageTypeCrit(iOldType)) fDamage *= 2.0;
//    new iProjectile = -1; 
//    iProjectile = FindEntityByClassname2(iProjectile, "tf_projectile");
    
//    aReturn = ActionApply(aReturn, Attribute_1173_OnTakeDamage_Projectile(iVictim, iAttacker, iSlot, fDamage, iDamagetype, fForce, fForcePos, bBuilding, iProjectile));
    
//    if (IsDamageTypeCrit(iOldType)) fDamage /= 2.0;
    
//    return aReturn; 
//    #else
//    return Plugin_Continue;
//    #endif
//}

public Attributes_PreThink(iClient)
{
    if (!IsPlayerAlive(iClient)) return;
    
    #if defined ENABLE_ATTRIBUTES
    new iButtonsLast = g_iLastButtons[iClient];
    new iButtons = GetClientButtons(iClient);
    new iButtons2 = iButtons;
    
    new Handle:hArray = CreateArray();
    new iSlot = GetClientSlot(iClient);
    if (iSlot >= 0) PushArrayCell(hArray, iSlot);
    PushArrayCell(hArray, 4);
    
    new iSlot2;
    for (new i = 0; i < GetArraySize(hArray); i++)
    {
        iSlot2 = GetArrayCell(hArray, i);
        iButtons = Attribute_1071_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1006_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1034_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1005_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1013_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_165_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1039_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1012_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1070_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1003_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1046_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1056_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1054_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1087_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1096_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1105_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        //iButtons = Attribute_1116_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        //iButtons = Attribute_1120_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1121_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1122_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1124_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1128_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1129_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1131_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1132_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1138_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1140_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1144_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        //iButtons = Attribute_1149_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1150_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1152_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1153_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1155_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1157_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1158_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1160_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1161_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1163_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1166_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1167_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1168_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1176_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1178_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1179_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1181_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1182_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1184_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1185_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1186_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1187_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1188_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1194_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1196_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1197_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1199_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1202_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1203_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
        iButtons = Attribute_1205_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
    }
    CloseHandle(hArray);
    
    iSlot2 = -1;
    iButtons = Attribute_1077_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
    
    for (iSlot2 = 0; iSlot2 <= SLOTS_MAX; iSlot2++)
    {
        iButtons = Attribute_1086_Prethink(iClient, iButtons, iSlot2, iButtonsLast);
    }

    if (iButtons != iButtons2) SetEntProp(iClient, Prop_Data, "m_nButtons", iButtons);    
    g_iLastButtons[iClient] = iButtons;
    
    g_bWasDisguised[iClient] = IsDisguised(iClient);
    #endif
}

public Action:TF2_CalcIsAttackCritical(iClient, iWeapon, String:strWeapon[], &bool:bCrit) {
    #if defined ENABLE_ATTRIBUTES
    if (!IsValidClient(iClient)) return Plugin_Continue;
    
    new iSlot = GetWeaponSlot(strWeapon);
    
    Attribute_1002_OnAttack(iClient, iSlot, bCrit);
    Attribute_1016_OnAttack(iClient, iSlot, bCrit);
    Attribute_1059_OnAttack(iClient, iSlot, bCrit);
    Attribute_1101_OnAttack(iClient, iSlot, bCrit);
    Attribute_1104_OnAttack(iClient, iSlot, bCrit);
    Attribute_1121_OnAttack(iClient, iSlot, bCrit);
    Attribute_1126_OnAttack(iClient, iSlot, bCrit);
    Attribute_1130_OnAttack(iClient, iSlot, bCrit);
    Attribute_1138_OnAttack(iClient, iSlot, bCrit);
    Attribute_1148_OnAttack(iClient, iSlot, bCrit);
    //Attribute_1149_OnAttack(iClient, iSlot, bCrit);
    Attribute_1151_OnAttack(iClient, iSlot, bCrit);
    Attribute_1179_OnAttack(iClient, iSlot, bCrit);
    Attribute_1187_OnAttack(iClient, iSlot, bCrit);
    Attribute_1188_OnAttack(iClient, iSlot, bCrit);
    Attribute_1197_OnAttack(iClient, iSlot, bCrit);
    Attribute_1198_OnAttack(iClient, iSlot, bCrit);
    Attribute_1202_OnAttack(iClient, iSlot, bCrit);
    Attribute_1205_OnAttack(iClient, iSlot, bCrit);
    #endif
    return Plugin_Continue;
}

public Attributes_EntityCreated(iEntity, const String:strClassname[]) {
    if (iEntity <= 0) return;
    if (!IsValidEdict(iEntity)) return;

    #if defined ENABLE_ATTRIBUTES
    g_iEntitySlot[iEntity] = -1;
    g_fEntityCreateTime[iEntity] = GetEngineTime();
    
    if (StrContains(strClassname, "tf_projectile_", false) >= 0 && !StrEqual(strClassname, "tf_projectile_syringe")) {
        //PrintToChatAll("Entity is projectile");
        #if defined ENABLE_SDKHOOKS
        SDKHook(iEntity, SDKHook_StartTouch, ProjectileStartTouch);
        SDKHook(iEntity, SDKHook_Think, ProjectilePreThink);
        #endif
        
        CreateTimer(0.0, Attributes_ProjCreatedPost, iEntity);
        //CreateTimer(0.1, CheckEntityPost, iEntity);
        //CreateTimer(0.1, CheckEntityPost, iEntity);
    }
    Attribute_1040_EntityCreated(iEntity);
    #endif
}

public Action:Attributes_ProjCreatedPost(Handle:hTimer, any:iEntity)
{
    #if defined ENABLE_ATTRIBUTES
    if (!IsValidEdict(iEntity)) return Plugin_Continue;
    
    decl String:strClassname[255];
    GetEdictClassname(iEntity, strClassname, sizeof(strClassname));
    if (StrEqual(strClassname, "tf_projectile_syringe")) return Plugin_Continue;
    if (StrContains(strClassname, "tf_projectile_", false) < 0) return Plugin_Continue;
    
    new iOwner = GetOwner(iEntity);
    if (IsValidClient(iOwner))
    {
        new iSlot = GetClientSlot(iOwner);
        g_iEntitySlot[iEntity] = iSlot;
        
        Attribute_1080_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1098_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1118_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1119_ProjCreated(iEntity, iOwner, iSlot);
        //Attribute_1149_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1153_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1133_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1159_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1162_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1156_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1172_ProjCreated(iEntity, iOwner, iSlot);
        Attribute_1197_ProjCreated(iEntity, iOwner, iSlot);
    }
    
    #endif
    return Plugin_Continue;
}

Attribute_OnInventory(iClient, iSlot)
{
    #if defined ENABLE_ATTRIBUTES
    Attribute_1039_OnInventory(iClient, iSlot);
    Attribute_1003_OnInventory(iClient, iSlot);
    Attribute_1016_OnInventory(iClient, iSlot);
    Attribute_1101_OnInventory(iClient, iSlot);
    Attribute_1113_OnInventory(iClient, iSlot);
    Attribute_1123_OnInventory(iClient, iSlot);
    Attribute_1126_OnInventory(iClient, iSlot);    
    Attribute_1130_OnInventory(iClient, iSlot);
    Attribute_1132_OnInventory(iClient, iSlot);
    Attribute_1151_OnInventory(iClient, iSlot);
    Attribute_1157_OnInventory(iClient, iSlot);
    Attribute_1176_OnInventory(iClient, iSlot);
    Attribute_1178_OnInventory(iClient, iSlot);
    Attribute_1179_OnInventory(iClient, iSlot);
    Attribute_1181_OnInventory(iClient, iSlot);
    Attribute_1182_OnInventory(iClient, iSlot);
    Attribute_1189_OnInventory(iClient, iSlot);
    Attribute_1194_OnInventory(iClient, iSlot);
    Attribute_1202_OnInventory(iClient, iSlot);
    #endif
}

public ProjectilePreThink(iEntity) {
    if (!IsValidEdict(iEntity)) return;
    
    #if defined ENABLE_ATTRIBUTES
    
    new iClient = GetOwner(iEntity);
    new iSlot = g_iEntitySlot[iEntity];
    
    Attribute_1067_OnProjectile(iEntity, iClient, iSlot);
    Attribute_1018_OnProjectile(iEntity, iClient, iSlot);
    Attribute_1056_OnProjectile(iEntity, iClient, iSlot);
    #endif
}

public Action:ProjectileStartTouch(iEntity, iOther)
{
    #if defined ENABLE_ATTRIBUTES
    new iOwner = GetOwner(iEntity);
    if (!IsValidClient(iOwner)) return Plugin_Continue;
    
    
    new Action:aReturn = Plugin_Continue;
    
    ActionApply(aReturn, Attribute_1040_PStartTouch(iEntity, iOther, iOwner, g_iEntitySlot[iEntity]));
    ActionApply(aReturn, Attribute_1155_PStartTouch(iEntity, iOther, iOwner, g_iEntitySlot[iEntity]));
    ActionApply(aReturn, Attribute_1197_PStartTouch(iEntity, iOther, iOwner, g_iEntitySlot[iEntity]));

    return aReturn;
    #else
    return Plugin_Continue;
    #endif
}

public Action:Attributes_RocketJump(Handle:hEvent, String:strName[], bool:bDontBroadcast) {
    new iClient = GetClientOfUserId(GetEventInt(hEvent, "userid"));
    if (!IsValidClient(iClient)) return Plugin_Continue;
    if (!IsValidTeam(iClient)) return Plugin_Continue;
    if (!IsPlayerAlive(iClient)) return Plugin_Continue;
    if (g_bRocketJumping[iClient]) return Plugin_Continue;
    
    g_bRocketJumping[iClient] = true;
    
    return Plugin_Continue;
}

public Action:Attributes_RocketJumpLand(Handle:hEvent, String:strName[], bool:bDontBroadcast) {
    new iClient = GetClientOfUserId(GetEventInt(hEvent, "userid"));
    if (!IsValidClient(iClient)) return Plugin_Continue;
    if (!IsValidTeam(iClient)) return Plugin_Continue;
    if (!IsPlayerAlive(iClient)) return Plugin_Continue;
    if (!g_bRocketJumping[iClient]) return Plugin_Continue;
    
    new iSlot = GetClientSlot(iClient);
    
    #if defined ENABLE_ATTRIBUTES
    Attribute_1026_RocketJumpLand(iClient, iSlot);
    #endif
    
    g_bRocketJumping[iClient] = false;
    
    return Plugin_Continue;
}

public Action:StickyJumpLand(Handle:hEvent, String:strName[], bool:bDontBroadcast) {
    new iClient = GetClientOfUserId(GetEventInt(hEvent, "userid"));
    if (!IsValidClient(iClient)) return Plugin_Continue;
    if (!IsValidTeam(iClient)) return Plugin_Continue;
    if (!IsPlayerAlive(iClient)) return Plugin_Continue;
    if (!g_bStickyJumping[iClient]) return Plugin_Continue;
    
    new iSlot = GetClientSlot(iClient);
    
    #if defined ENABLE_ATTRIBUTES
    Attribute_1102_StickyJumpLand(iClient, iSlot);
    #endif
    
    g_bStickyJumping[iClient] = false;
    
    return Plugin_Continue;
}

public Action:StickyJump(Handle:hEvent, String:strName[], bool:bDontBroadcast) {
    new iClient = GetClientOfUserId(GetEventInt(hEvent, "userid"));
    if (!IsValidClient(iClient)) return Plugin_Continue;
    if (!IsValidTeam(iClient)) return Plugin_Continue;
    if (!IsPlayerAlive(iClient)) return Plugin_Continue;
    if (g_bStickyJumping[iClient]) return Plugin_Continue;
    
    g_bStickyJumping[iClient] = true;
    
    return Plugin_Continue;
}

Attributes_Precache()
{
    SuperPrecacheSound(SOUND_SHIELD_BREAK);
    SuperPrecacheSound(SOUND_SAPPER_BREAK);
    for (new i = 0; i < sizeof(g_strSoundExplosionBox); i++)
    {
        SuperPrecacheSound(g_strSoundExplosionBox[i]);
    }
    SuperPrecacheSound(SOUND_EXPLOSION_BIG);
    SuperPrecacheSound(SOUND_CHARGE_STICKYBOMB);
    SuperPrecacheSound(SOUND_BONEBREAK);
    SuperPrecacheSound(SOUND_WEAPON_SHOTGUN);
    SuperPrecacheSound(SOUND_VO_HEAVY_I_LIVE);
    SuperPrecacheSound(SOUND_UBERCHARGE);
    SuperPrecacheSound(SOUND_HL1_BELL);
    SuperPrecacheSound(SOUND_TRAIN_BELL_LOOP);
    SuperPrecacheSound(SOUND_HORROR_BELL);
    SuperPrecacheSound(SOUND_STABBY);
    SuperPrecacheSound(SOUND_ALT_FIRE_PROJ);
    SuperPrecacheSound(SOUND_BLOCK_CROUCH);
    SuperPrecacheSound(SOUND_COMBO_HEAVY);
    SuperPrecacheSound(SOUND_SUPRISE_SPY);
    SuperPrecacheSound(SOUND_MARKED);
    SuperPrecacheSound(SOUND_MARKED_REV);
    SuperPrecacheSound(SOUND_HEALAOE);
    SuperPrecacheSound(SOUND_HEALAOE2);

    SuperPrecacheSound(SOUND_1122_NOKILL);
    
    SuperPrecacheModel(MODEL_DEFAULTPHYSICS, true);
    SuperPrecacheModel(MODEL_BOOMERANG, true);
    SuperPrecacheModel(PROJECTILE_MODEL_21, true);
    SuperPrecacheModel(PROJECTILE_MODEL_22, true);
    SuperPrecacheModel(PROJECTILE_MODEL_23, true);
    SuperPrecacheModel(PROJECTILE_MODEL_24, true);
    
    PrecacheParticle(PARTICLE_FIRE);
    PrecacheParticle(PARTICLE_AREA_FIRE_BLUE);
    PrecacheParticle(PARTICLE_EXPLOSION_SMOKE);
    PrecacheParticle(PARTICLE_EXPLOSION_FLASH);
    PrecacheParticle(PARTICLE_EXPLOSION);
    PrecacheParticle(PARTICLE_EXPLOSION_BUBBLES);
    PrecacheParticle(PARTICLE_QUICKDRAW_RED);
    PrecacheParticle(PARTICLE_QUICKDRAW_BLUE);
    PrecacheParticle(PARTICLE_POISON_GAS);
    PrecacheParticle(PARTICLE_POISON_GOOP);
    PrecacheParticle(PARTICLE_PURPLE_FLAME_SMOG);
    PrecacheParticle(PARTICLE_BUBBLESTREAM);
    PrecacheParticle(PARTICLE_TOXIC_DEBUFF_BLUE);
    PrecacheParticle(PARTICLE_TOXIC_DEBUFF_RED);
    PrecacheParticle(PARTICLE_STEAM_ZSTREAM);
    PrecacheParticle(PARTICLE_ALT_FIRESTREAM);
    PrecacheParticle(PARTICLE_SNOWIMPACT);
    PrecacheParticle(PARTICLE_ORBITING_SKULL);
    PrecacheParticle(PARTICLE_ZEUS);
    PrecacheParticle(PARTICLE_ZEUS_CRACKLE);
    PrecacheParticle(PARTICLE_GLOWINGBURST);
    PrecacheParticle(PARTICLE_BLOODMIST);
    PrecacheParticle(PARTICLE_BLOODIMPACT);
    PrecacheParticle(PARTICLE_WUBWUB_BEAM);
    PrecacheParticle(PARTICLE_BISONSHOCK);
    PrecacheParticle(PARTICLE_BISONIMPACT);
    PrecacheParticle(PARTICLE_ELECTRICITY);
    PrecacheParticle(PARTICLE_ELECTROCUTED);
    PrecacheParticle(PARTICLE_MUSKET_FLASH);
    PrecacheParticle(PARTICLE_DRAW_LASER_SIGHT);
    PrecacheParticle(PARTICLE_FLASH);
    PrecacheParticle(PARTICLE_METAL_SHIELD_SPARKS1);
    PrecacheParticle(PARTICLE_METAL_SHIELD_SPARKS2);
    
    PrecacheParticle(PARTICLE_DARK_FIRE);
    PrecacheParticle(PARTICLE_SPY_DISGUISE_R);
    PrecacheParticle(PARTICLE_SPY_DISGUISE_B);
    PrecacheParticle(PARTICLE_WHITE_PARTICLE);
    PrecacheParticle(PARTICLE_IMPACT_BLUE);
    PrecacheParticle(PARTICLE_HADOKEN_2);
    PrecacheParticle(PARTICLE_HADOKEN_3);
    PrecacheParticle(PARTICLE_MEDIC_HEAL_AURA_R);
    PrecacheParticle(PARTICLE_MEDIC_HEAL_AURA_B);
    PrecacheParticle(PARTICLE_RAGE_BUFF);
    PrecacheParticle(PARTICLE_BLUR);
    PrecacheParticle(PARTICLE_BULLET_SURROUND);
    PrecacheParticle(PARTICLE_FIRETRAIL1);
    PrecacheParticle(PARTICLE_SPOOKYTRAIL1);
    PrecacheParticle(PARTICLE_MUZZLE2);
    PrecacheParticle(PARTICLE_SPOOKYAURA);
    PrecacheParticle(PARTICLE_STARRY_BURST);
    PrecacheParticle(PARTICLE_SCARED);
    PrecacheParticle(PARTICLE_HEALED_B);
    PrecacheParticle(PARTICLE_HEALED_R);
    PrecacheParticle(PARTICLE_SPECIALUBER);
    
    new iLoop;
    for (iLoop = 0; iLoop < sizeof(g_strGenericHit); iLoop++) {
        PrecacheSound(g_strGenericHit[iLoop], true);
    }
    
    #if defined ENABLE_ATTRIBUTES
    Attribute_1004_Precache();
    Attribute_1016_Precache();
    Attribute_1056_Precache();
    Attribute_1054_Precache();
    Attribute_1080_Precache();
    Attribute_1086_Precache();
    Attribute_1094_Precache();
    Attribute_1163_Precache();
    Attribute_1174_Precache();
    Attribute_1179_Precache();
    Attribute_1180_Precache();
    Attribute_1193_Precache();
    Attribute_1197_Precache();
    Attribute_1198_Precache();
    Attribute_1199_Precache();
    Attribute_1201_Precache();
    Attribute_1202_Precache();
    #endif
}

Attributes_OnDeath(iClient, iAttacker, iAssister = -1, iSlot)
{
    #if defined ENABLE_ATTRIBUTES
    Attribute_1094_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1095_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1097_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1100_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1106_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1107_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1111_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1137_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1141_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1176_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1180_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1187_OnDeath(iClient, iAttacker, iAssister, iSlot);
    Attribute_1190_OnDeath(iClient, iAttacker, iAssister);
    #endif
}

AttributesInit()
{
    #if defined ENABLE_ATTRIBUTES
    Attribute_1003_Init();
    Attribute_1046_Init();
    Attribute_1056_Init();
    Attribute_1007_Init();
    Attribute_1121_Init();
    Attribute_1164_Init();
    Attribute_1190_Init();
    Attribute_1194_Init();
    #endif
}

AttributesStop()
{
    #if defined ENABLE_ATTRIBUTES
    Attributes_1056_Stop();
    Attributes_1039_Stop();
    Attributes_1086_Stop();
    FastCloakRemoveAll();
    #endif
}

Attributes_ResetClient(iClient)
{
    g_bRocketJumping[iClient] = false;
    g_bStickyJumping[iClient] = false;
}

Attributes_OnGameFrame()
{
    #if defined ENABLE_ATTRIBUTES
    Attributes_1056_Think();
    #endif
}

///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////

Float:GetClientAttribute(iClient, iSlot = -1, iAttribute)
{
    if (g_hAttributes[iClient] == INVALID_HANDLE) return 0.0;
    
    new Float:fValue = 0.0;
    new iCount = 0;
    for (new i = 0; i < GetArraySize(g_hAttributes[iClient]); i++)
    {
        new iAttribute2 = GetArrayCell(g_hAttributes[iClient], i, 0);
        new iSlot2 = GetArrayCell(g_hAttributes[iClient], i, 1);
        if (iAttribute == iAttribute2 && (iSlot == -1 || iSlot == iSlot2))
        {
            new Float:fValue2 = GetArrayCell(g_hAttributes[iClient], i, 2);
            if (iCount == 0) fValue = fValue2;
            else fValue *= fValue2;
            
            iCount++;
        }
    }
    
    return fValue;
}

bool:ClientHasAttribute(iClient, iSlot = -1, iAttribute)
{
    if (!IsValidClient(iClient)) return false;
    if (g_hAttributes[iClient] == INVALID_HANDLE) return false;
    
    for (new i = 0; i < GetArraySize(g_hAttributes[iClient]); i++)
    {
        new iAttribute2 = GetArrayCell(g_hAttributes[iClient], i, 0);
        if (iAttribute == iAttribute2)
        {
            new iSlot2 = GetArrayCell(g_hAttributes[iClient], i, 1);
            if (iSlot == -1 || iSlot == iSlot2) return true;
        }
    }
    
    return false;
}

ResetClientAttributes(iClient)
{
    if (g_hAttributes[iClient] != INVALID_HANDLE) CloseHandle(g_hAttributes[iClient]);
    g_hAttributes[iClient] = CreateArray(3);
    
    //PrintToChat(iClient, "Reset attributes");
}

GiveClientAttribute(iClient, iSlot, iAttribute, Float:fValue)
{
    if (g_hAttributes[iClient] == INVALID_HANDLE) ResetClientAttributes(iClient);
    new iOffset = PushArrayCell(g_hAttributes[iClient], iAttribute);
    SetArrayCell(g_hAttributes[iClient], iOffset, iSlot, 1);
    SetArrayCell(g_hAttributes[iClient], iOffset, fValue, 2);
    
    //PrintToChat(iClient, "Gave attribute %d in slot %d", iAttribute, iSlot);
}

public Action:CommandClientAttributes(iClient, iArgs)
{
    if (iArgs < 1)
    {
        ReplyToCommand(iClient, "aw2_clientattributes <player>");
        return Plugin_Handled;
    }
    
    decl String:strUser[65];
    GetCmdArg(1, strUser, sizeof(strUser));
    
    decl String:target_name[MAX_TARGET_LENGTH];
    decl target_list[MAXPLAYERS], target_count, bool:tn_is_ml;

    if ((target_count = ProcessTargetString(
            strUser,
            iClient,
            target_list,
            MAXPLAYERS,
            COMMAND_FILTER_ALIVE & COMMAND_FILTER_DEAD,
            target_name,
            sizeof(target_name),
            tn_is_ml)) <= 0)
    {
        ReplyToTargetError(iClient, target_count);
        return Plugin_Handled;
    }

    for (new i = 0; i < target_count; i++) {
        new iTarget = target_list[i];
        
        if (IsValidClient(iTarget) && g_hAttributes[iTarget] != INVALID_HANDLE)
        {
            for (new j = 0; j < GetArraySize(g_hAttributes[iTarget]); j++)
            {
                new iAttribute = GetArrayCell(g_hAttributes[iTarget], j, 0);
                new iSlot = GetArrayCell(g_hAttributes[iClient], j, 1);
                new Float:fValue = GetArrayCell(g_hAttributes[iTarget], j, 2);
                PrintToConsole(iClient, "%N has attribute %d = %.1f (slot %d)", iTarget, iAttribute, fValue, iSlot);
            }
        }
        else
        {
            ReplyToCommand(iClient, "Client is invalid");
        }
    }    
    return Plugin_Handled;
}

/*public TF2_OnConditionAdded(iClient, TFCond:condition)
{
    Attribute_1115_OnConditionAdded(iClient, condition);

    Attribute_1124_OnConditionAdded(iClient, condition);
    Attribute_1125_OnConditionAdded(iClient, condition);
    Attribute_1130_OnConditionAdded(iClient, condition);
    Attribute_1163_OnConditionAdded(iClient, condition);
    Attribute_1164_OnConditionAdded(iClient, condition);
    Attribute_1174_OnConditionAdded(iClient, condition);
    Attribute_1177_OnConditionAdded(iClient, condition);
    Attribute_1178_OnConditionAdded(iClient, condition);
    Attribute_1194_OnConditionAdded(iClient, condition);
}
public TF2_OnConditionRemoved(iClient, TFCond:condition)
{
    Attribute_1115_OnConditionRemoved(iClient, condition);
    Attribute_1125_OnConditionRemoved(iClient, condition);
    Attribute_1130_OnConditionRemoved(iClient, condition);
    Attribute_1135_OnConditionRemoved(iClient, condition);
    Attribute_1163_OnConditionRemoved(iClient, condition);
    Attribute_1174_OnConditionRemoved(iClient, condition);
    Attribute_1187_OnConditionRemoved(iClient, condition);
    Attribute_1193_OnConditionRemoved(iClient, condition);
}*/
    
public Action:OnDeployBanner(Handle:hEvent, String: strName[], bool:bDontBroadcast)
{
    new iClient = GetClientOfUserId(GetEventInt(hEvent, "buff_owner"));
    if (!IsValidClient(iClient)) return Plugin_Continue;
    if (!IsValidTeam(iClient)) return Plugin_Continue;
    if (!IsPlayerAlive(iClient)) return Plugin_Continue;
    
    new iBuffType = GetClientOfUserId(GetEventInt(hEvent, "buff_type"));
    if (iBuffType != 1) return Plugin_Continue;
    g_bBuffDeployer[iClient] = true;
    g_iBuffType[iClient] = iBuffType;
    
    return Plugin_Continue;
}

public Action:OnExtinguished(Handle:hEvent, String: strName[], bool:bDontBroadcast)
{
    new iVictim = GetClientOfUserId(GetEventInt(hEvent, "victim"));
    if (!IsValidClient(iVictim)) return Plugin_Continue;
    if (!IsValidTeam(iVictim)) return Plugin_Continue;
    if (!IsPlayerAlive(iVictim)) return Plugin_Continue;
    
    new iHealer = GetClientOfUserId(GetEventInt(hEvent, "healer"));
    if (!IsValidClient(iHealer)) return Plugin_Continue;
    if (!IsValidTeam(iHealer)) return Plugin_Continue;
    if (!IsPlayerAlive(iHealer)) return Plugin_Continue;
    
    #if defined ENABLE_ATTRIBUTES
    Attribute_1163_OnExtinguished(iVictim, iHealer);
    #endif
    
    return Plugin_Continue;
}

public Action:OnBuffedByBanner(Handle:hEvent, String: strName[], bool:bDontBroadcast)
{
    new iClient = GetClientOfUserId(GetEventInt(hEvent, "userid"));
    if (!IsValidClient(iClient)) return Plugin_Continue;
    if (!IsValidTeam(iClient)) return Plugin_Continue;
    if (!IsPlayerAlive(iClient)) return Plugin_Continue;
    
    
    new iBuffer = GetClientOfUserId(GetEventInt(hEvent, "buff_owner"));
    g_iBuffers[iClient] = iBuffer;
    new iBuffType = GetClientOfUserId(GetEventInt(hEvent, "buff_type"));
    if (iBuffType != 1) return Plugin_Continue;
    // We only want the BuffType stored on the person giving out the buff.
    g_iBuffType[iBuffer] = iBuffType;
    
    #if defined ENABLE_ATTRIBUTES
    Attribute_1154_OnBuffedByBanner(iClient, iBuffer, iBuffType);
    #endif
    
    return Plugin_Continue;
}

// misc stuff
GetClientMaxMetal(iClient)
{
    new Float:fValue = 200.0;
    if (ClientHasAttribute(iClient, _, 80))
    {
        fValue *= GetClientAttribute(iClient, _, 80);
    }
    
    new iValue = RoundFloat(fValue);
    return iValue;
}
